/* tslint:disable */
/* eslint-disable */
/*
API Settings

At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.

BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.

And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.

With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners. 

Learn more at BlueSnap.com

The version of the OpenAPI document: 8976-Tools


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TransactionCreateBatchTransactionRequest } from '../models';
// @ts-ignore
import { TransactionCreateBatchTransactionRequestBatchTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequest } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestAcssDirectDebitTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestBecsDirectDebitTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestEcpTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestIdealTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestLocalBankTransferTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestPayerInfo } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestPaypalTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestSepaDirectDebitTransaction } from '../models';
// @ts-ignore
import { TransactionCreateSofortTransactionRequestSofortTransaction } from '../models';
// @ts-ignore
import { TransactionInitiateRefundRequest } from '../models';
// @ts-ignore
import { TransactionInitiateRefundRequestTransactionMetaData } from '../models';
// @ts-ignore
import { TransactionUpdatePaypalTransactionRequest } from '../models';
// @ts-ignore
import { TransactionUpdatePaypalTransactionRequestPaypalTransaction } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Merchant Approve Transaction
         * @param {string} [transactionid] either &#x60;transactionid&#x60; or &#x60;merchanttransactionid&#x60; &lt;b&gt;is required&lt;/b&gt; &lt;br /&gt;ID of the transaction to be approved/declined
         * @param {boolean} [approvetransaction] Set to &#x60;true&#x60; to approve the transaction or to &#x60;false&#x60; to decline the transaction. Default value is &#x60;true&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveMerchantTransaction: async (transactionid?: string, approvetransaction?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/transactions/approval`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })
            if (transactionid !== undefined) {
                localVarQueryParameter['transactionid'] = transactionid;
            }

            if (approvetransaction !== undefined) {
                localVarQueryParameter['approvetransaction'] = approvetransaction;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transactions/approval',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Pending Refund
         * @param {string} transactionId transactionId received from BlueSnap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPendingRefund: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('cancelPendingRefund', 'transactionId', transactionId)
            const localVarPath = `/transactions/pending-refund/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transactions/pending-refund/{transactionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Batch Transaction
         * @param {TransactionCreateBatchTransactionRequest} [transactionCreateBatchTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchTransaction: async (transactionCreateBatchTransactionRequest?: TransactionCreateBatchTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/batch-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transactionCreateBatchTransactionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batch-transactions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transactionCreateBatchTransactionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Sofort Transaction
         * @param {TransactionCreateSofortTransactionRequest} [transactionCreateSofortTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSofortTransaction: async (transactionCreateSofortTransactionRequest?: TransactionCreateSofortTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alt-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transactionCreateSofortTransactionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/alt-transactions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transactionCreateSofortTransactionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Batch Transaction
         * @param {string} batchId batch ID sent in the Create Batch Transaction request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchTransaction: async (batchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'batchId' is not null or undefined
            assertParamExists('getBatchTransaction', 'batchId', batchId)
            const localVarPath = `/batch-transactions/{batchId}`
                .replace(`{${"batchId"}}`, encodeURIComponent(String(batchId !== undefined ? batchId : `-batchId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/batch-transactions/{batchId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve
         * @param {string} transactionId transaction ID received in the response from BlueSnap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getById', 'transactionId', transactionId)
            const localVarPath = `/transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transactions/{transactionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve PayPal Transaction
         * @param {string} orderId order ID received in the response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaypalTransaction: async (orderId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getPaypalTransaction', 'orderId', orderId)
            const localVarPath = `/alt-transactions/resolve?orderId={orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId !== undefined ? orderId : `-orderId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/alt-transactions/resolve?orderId={orderId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * for Australia and Canada
         * @summary Get Pre-Notification Debit Agreement
         * @param {string} [transactionId] Argument included in the response for the Create Debit Agreement request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreNotificationDebitAgreement: async (transactionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/agreements/prenotification/{transactionId}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })
            if (transactionId !== undefined) {
                localVarQueryParameter['transactionId'] = transactionId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/agreements/prenotification/{transactionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve SEPA DD Transaction
         * @param {string} transactionId transaction ID received in the response from BlueSnap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSepaDd: async (transactionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('getSepaDd', 'transactionId', transactionId)
            const localVarPath = `/alt-transactions/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/alt-transactions/{transactionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Sofort Transaction
         * @param {number} orderId Order ID received in the Create Sofort Transaction response from BlueSnap
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSofortTransaction: async (orderId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getSofortTransaction', 'orderId', orderId)
            const localVarPath = `/alt-transactions/resolve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })
            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/alt-transactions/resolve',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refund
         * @param {string} transactionId ID of the transaction to be refunded &lt;br&gt; Required if not using &#x60;merchantTransactionId&#x60;
         * @param {TransactionInitiateRefundRequest} [transactionInitiateRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateRefund: async (transactionId: string, transactionInitiateRefundRequest?: TransactionInitiateRefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            assertParamExists('initiateRefund', 'transactionId', transactionId)
            const localVarPath = `/transactions/refund/{transactionId}`
                .replace(`{${"transactionId"}}`, encodeURIComponent(String(transactionId !== undefined ? transactionId : `-transactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transactionInitiateRefundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/transactions/refund/{transactionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transactionInitiateRefundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update PayPal Transaction
         * @param {TransactionUpdatePaypalTransactionRequest} [transactionUpdatePaypalTransactionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaypalTransaction: async (transactionUpdatePaypalTransactionRequest?: TransactionUpdatePaypalTransactionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/alt-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: transactionUpdatePaypalTransactionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/alt-transactions',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(transactionUpdatePaypalTransactionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Merchant Approve Transaction
         * @param {TransactionApiApproveMerchantTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async approveMerchantTransaction(requestParameters: TransactionApiApproveMerchantTransactionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.approveMerchantTransaction(requestParameters.transactionid, requestParameters.approvetransaction, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel Pending Refund
         * @param {TransactionApiCancelPendingRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelPendingRefund(requestParameters: TransactionApiCancelPendingRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelPendingRefund(requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Batch Transaction
         * @param {TransactionApiCreateBatchTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBatchTransaction(requestParameters: TransactionApiCreateBatchTransactionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const transactionCreateBatchTransactionRequest: TransactionCreateBatchTransactionRequest = {
                batchTransaction: requestParameters.batchTransaction
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBatchTransaction(transactionCreateBatchTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Sofort Transaction
         * @param {TransactionApiCreateSofortTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSofortTransaction(requestParameters: TransactionApiCreateSofortTransactionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const transactionCreateSofortTransactionRequest: TransactionCreateSofortTransactionRequest = {
                ecpTransaction: requestParameters.ecpTransaction,
                amount: requestParameters.amount,
                payerInfo: requestParameters.payerInfo,
                softDescriptor: requestParameters.softDescriptor,
                currency: requestParameters.currency,
                authorizedByShopper: requestParameters.authorizedByShopper,
                becsDirectDebitTransaction: requestParameters.becsDirectDebitTransaction,
                idealTransaction: requestParameters.idealTransaction,
                localBankTransferTransaction: requestParameters.localBankTransferTransaction,
                paypalTransaction: requestParameters.paypalTransaction,
                acssDirectDebitTransaction: requestParameters.acssDirectDebitTransaction,
                sepaDirectDebitTransaction: requestParameters.sepaDirectDebitTransaction,
                sofortTransaction: requestParameters.sofortTransaction
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSofortTransaction(transactionCreateSofortTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Batch Transaction
         * @param {TransactionApiGetBatchTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBatchTransaction(requestParameters: TransactionApiGetBatchTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBatchTransaction(requestParameters.batchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve
         * @param {TransactionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TransactionApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve PayPal Transaction
         * @param {TransactionApiGetPaypalTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaypalTransaction(requestParameters: TransactionApiGetPaypalTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaypalTransaction(requestParameters.orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * for Australia and Canada
         * @summary Get Pre-Notification Debit Agreement
         * @param {TransactionApiGetPreNotificationDebitAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPreNotificationDebitAgreement(requestParameters: TransactionApiGetPreNotificationDebitAgreementRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPreNotificationDebitAgreement(requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve SEPA DD Transaction
         * @param {TransactionApiGetSepaDdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSepaDd(requestParameters: TransactionApiGetSepaDdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSepaDd(requestParameters.transactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Sofort Transaction
         * @param {TransactionApiGetSofortTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSofortTransaction(requestParameters: TransactionApiGetSofortTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSofortTransaction(requestParameters.orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refund
         * @param {TransactionApiInitiateRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiateRefund(requestParameters: TransactionApiInitiateRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const transactionInitiateRefundRequest: TransactionInitiateRefundRequest = {
                reason: requestParameters.reason,
                cancelSubscriptions: requestParameters.cancelSubscriptions,
                transactionMetaData: requestParameters.transactionMetaData
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiateRefund(requestParameters.transactionId, transactionInitiateRefundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update PayPal Transaction
         * @param {TransactionApiUpdatePaypalTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaypalTransaction(requestParameters: TransactionApiUpdatePaypalTransactionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const transactionUpdatePaypalTransactionRequest: TransactionUpdatePaypalTransactionRequest = {
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                paypalTransaction: requestParameters.paypalTransaction
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaypalTransaction(transactionUpdatePaypalTransactionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TransactionApiFp(configuration)
    return {
        /**
         * 
         * @summary Merchant Approve Transaction
         * @param {TransactionApiApproveMerchantTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        approveMerchantTransaction(requestParameters: TransactionApiApproveMerchantTransactionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.approveMerchantTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Pending Refund
         * @param {TransactionApiCancelPendingRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelPendingRefund(requestParameters: TransactionApiCancelPendingRefundRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.cancelPendingRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Batch Transaction
         * @param {TransactionApiCreateBatchTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBatchTransaction(requestParameters: TransactionApiCreateBatchTransactionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createBatchTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Sofort Transaction
         * @param {TransactionApiCreateSofortTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSofortTransaction(requestParameters: TransactionApiCreateSofortTransactionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createSofortTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Batch Transaction
         * @param {TransactionApiGetBatchTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBatchTransaction(requestParameters: TransactionApiGetBatchTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getBatchTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve
         * @param {TransactionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TransactionApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve PayPal Transaction
         * @param {TransactionApiGetPaypalTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaypalTransaction(requestParameters: TransactionApiGetPaypalTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPaypalTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * for Australia and Canada
         * @summary Get Pre-Notification Debit Agreement
         * @param {TransactionApiGetPreNotificationDebitAgreementRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPreNotificationDebitAgreement(requestParameters: TransactionApiGetPreNotificationDebitAgreementRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getPreNotificationDebitAgreement(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve SEPA DD Transaction
         * @param {TransactionApiGetSepaDdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSepaDd(requestParameters: TransactionApiGetSepaDdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSepaDd(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Sofort Transaction
         * @param {TransactionApiGetSofortTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSofortTransaction(requestParameters: TransactionApiGetSofortTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSofortTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refund
         * @param {TransactionApiInitiateRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiateRefund(requestParameters: TransactionApiInitiateRefundRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.initiateRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update PayPal Transaction
         * @param {TransactionApiUpdatePaypalTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaypalTransaction(requestParameters: TransactionApiUpdatePaypalTransactionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePaypalTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for approveMerchantTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiApproveMerchantTransactionRequest
 */
export type TransactionApiApproveMerchantTransactionRequest = {
    
    /**
    * either `transactionid` or `merchanttransactionid` <b>is required</b> <br />ID of the transaction to be approved/declined
    * @type {string}
    * @memberof TransactionApiApproveMerchantTransaction
    */
    readonly transactionid?: string
    
    /**
    * Set to `true` to approve the transaction or to `false` to decline the transaction. Default value is `true`.
    * @type {boolean}
    * @memberof TransactionApiApproveMerchantTransaction
    */
    readonly approvetransaction?: boolean
    
}

/**
 * Request parameters for cancelPendingRefund operation in TransactionApi.
 * @export
 * @interface TransactionApiCancelPendingRefundRequest
 */
export type TransactionApiCancelPendingRefundRequest = {
    
    /**
    * transactionId received from BlueSnap
    * @type {string}
    * @memberof TransactionApiCancelPendingRefund
    */
    readonly transactionId: string
    
}

/**
 * Request parameters for createBatchTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiCreateBatchTransactionRequest
 */
export type TransactionApiCreateBatchTransactionRequest = {
    
} & TransactionCreateBatchTransactionRequest

/**
 * Request parameters for createSofortTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiCreateSofortTransactionRequest
 */
export type TransactionApiCreateSofortTransactionRequest = {
    
} & TransactionCreateSofortTransactionRequest

/**
 * Request parameters for getBatchTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiGetBatchTransactionRequest
 */
export type TransactionApiGetBatchTransactionRequest = {
    
    /**
    * batch ID sent in the Create Batch Transaction request
    * @type {string}
    * @memberof TransactionApiGetBatchTransaction
    */
    readonly batchId: string
    
}

/**
 * Request parameters for getById operation in TransactionApi.
 * @export
 * @interface TransactionApiGetByIdRequest
 */
export type TransactionApiGetByIdRequest = {
    
    /**
    * transaction ID received in the response from BlueSnap
    * @type {string}
    * @memberof TransactionApiGetById
    */
    readonly transactionId: string
    
}

/**
 * Request parameters for getPaypalTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiGetPaypalTransactionRequest
 */
export type TransactionApiGetPaypalTransactionRequest = {
    
    /**
    * order ID received in the response
    * @type {string}
    * @memberof TransactionApiGetPaypalTransaction
    */
    readonly orderId: string
    
}

/**
 * Request parameters for getPreNotificationDebitAgreement operation in TransactionApi.
 * @export
 * @interface TransactionApiGetPreNotificationDebitAgreementRequest
 */
export type TransactionApiGetPreNotificationDebitAgreementRequest = {
    
    /**
    * Argument included in the response for the Create Debit Agreement request
    * @type {string}
    * @memberof TransactionApiGetPreNotificationDebitAgreement
    */
    readonly transactionId?: string
    
}

/**
 * Request parameters for getSepaDd operation in TransactionApi.
 * @export
 * @interface TransactionApiGetSepaDdRequest
 */
export type TransactionApiGetSepaDdRequest = {
    
    /**
    * transaction ID received in the response from BlueSnap
    * @type {string}
    * @memberof TransactionApiGetSepaDd
    */
    readonly transactionId: string
    
}

/**
 * Request parameters for getSofortTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiGetSofortTransactionRequest
 */
export type TransactionApiGetSofortTransactionRequest = {
    
    /**
    * Order ID received in the Create Sofort Transaction response from BlueSnap
    * @type {number}
    * @memberof TransactionApiGetSofortTransaction
    */
    readonly orderId: number
    
}

/**
 * Request parameters for initiateRefund operation in TransactionApi.
 * @export
 * @interface TransactionApiInitiateRefundRequest
 */
export type TransactionApiInitiateRefundRequest = {
    
    /**
    * ID of the transaction to be refunded <br> Required if not using `merchantTransactionId`
    * @type {string}
    * @memberof TransactionApiInitiateRefund
    */
    readonly transactionId: string
    
} & TransactionInitiateRefundRequest

/**
 * Request parameters for updatePaypalTransaction operation in TransactionApi.
 * @export
 * @interface TransactionApiUpdatePaypalTransactionRequest
 */
export type TransactionApiUpdatePaypalTransactionRequest = {
    
} & TransactionUpdatePaypalTransactionRequest

/**
 * TransactionApiGenerated - object-oriented interface
 * @export
 * @class TransactionApiGenerated
 * @extends {BaseAPI}
 */
export class TransactionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Merchant Approve Transaction
     * @param {TransactionApiApproveMerchantTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public approveMerchantTransaction(requestParameters: TransactionApiApproveMerchantTransactionRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).approveMerchantTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Pending Refund
     * @param {TransactionApiCancelPendingRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public cancelPendingRefund(requestParameters: TransactionApiCancelPendingRefundRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).cancelPendingRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Batch Transaction
     * @param {TransactionApiCreateBatchTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public createBatchTransaction(requestParameters: TransactionApiCreateBatchTransactionRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).createBatchTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Sofort Transaction
     * @param {TransactionApiCreateSofortTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public createSofortTransaction(requestParameters: TransactionApiCreateSofortTransactionRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).createSofortTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Batch Transaction
     * @param {TransactionApiGetBatchTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getBatchTransaction(requestParameters: TransactionApiGetBatchTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getBatchTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve
     * @param {TransactionApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getById(requestParameters: TransactionApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve PayPal Transaction
     * @param {TransactionApiGetPaypalTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getPaypalTransaction(requestParameters: TransactionApiGetPaypalTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getPaypalTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * for Australia and Canada
     * @summary Get Pre-Notification Debit Agreement
     * @param {TransactionApiGetPreNotificationDebitAgreementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getPreNotificationDebitAgreement(requestParameters: TransactionApiGetPreNotificationDebitAgreementRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getPreNotificationDebitAgreement(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve SEPA DD Transaction
     * @param {TransactionApiGetSepaDdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getSepaDd(requestParameters: TransactionApiGetSepaDdRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getSepaDd(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Sofort Transaction
     * @param {TransactionApiGetSofortTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public getSofortTransaction(requestParameters: TransactionApiGetSofortTransactionRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).getSofortTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refund
     * @param {TransactionApiInitiateRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public initiateRefund(requestParameters: TransactionApiInitiateRefundRequest, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).initiateRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update PayPal Transaction
     * @param {TransactionApiUpdatePaypalTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionApiGenerated
     */
    public updatePaypalTransaction(requestParameters: TransactionApiUpdatePaypalTransactionRequest = {}, options?: AxiosRequestConfig) {
        return TransactionApiFp(this.configuration).updatePaypalTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
