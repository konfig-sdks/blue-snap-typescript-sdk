/* tslint:disable */
/* eslint-disable */
/*
API Settings

At BlueSnap, we look at payments a little differently. Our Payment Orchestration Platform helps businesses accept payments globally and is designed to increase revenue and reduces costs. We provide a comprehensive back-end solutions that simplifies the complexity of payments, managing the full process from start to finish.

BlueSnap supports payments through multiple sales channels such as online and mobile sales, marketplaces, subscriptions, invoice payments and manual orders through a virtual terminal. And for businesses looking for embedded payments, we offer white-labeled payments for platforms with automated underwriting and onboarding that supports marketplaces and split payments.

And with one integration and contract, businesses can sell in over 200 geographies with access to local acquiring in 47 countries, 110+ currencies and 100+ global payment types, including popular eWallets, automated accounts receivable, world-class fraud protection and chargeback management, built-in solutions for regulation and tax compliance, and unified global reporting to help businesses grow.

With a US headquarters in Waltham, MA, and EU headquarters in Dublin, Ireland, BlueSnap is backed by world-class private equity investors including Great Hill Partners and Parthenon Capital Partners. 

Learn more at BlueSnap.com

The version of the OpenAPI document: 8976-Tools


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SubscriptionCreateMerchantManagedChargeRequest } from '../models';
// @ts-ignore
import { SubscriptionCreateMerchantManagedSubscriptionRequest } from '../models';
// @ts-ignore
import { SubscriptionCreateMerchantManagedSubscriptionRequestPayerInfo } from '../models';
// @ts-ignore
import { SubscriptionCreateMerchantManagedSubscriptionRequestPaymentSource } from '../models';
// @ts-ignore
import { SubscriptionCreateNewRequest } from '../models';
// @ts-ignore
import { SubscriptionCreateNewRequestPayerInfo } from '../models';
// @ts-ignore
import { SubscriptionCreateNewRequestPaymentSource } from '../models';
// @ts-ignore
import { SubscriptionUpdateSubscriptionRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Merchant-Managed Subscription Charge
         * @param {number} subscriptionId BlueSnap identifier for the subscription.
         * @param {SubscriptionCreateMerchantManagedChargeRequest} [subscriptionCreateMerchantManagedChargeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchantManagedCharge: async (subscriptionId: number, subscriptionCreateMerchantManagedChargeRequest?: SubscriptionCreateMerchantManagedChargeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('createMerchantManagedCharge', 'subscriptionId', subscriptionId)
            const localVarPath = `/recurring/ondemand/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscriptionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionCreateMerchantManagedChargeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/ondemand/{subscriptionId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateMerchantManagedChargeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Merchant-Managed Subscription
         * @param {SubscriptionCreateMerchantManagedSubscriptionRequest} [subscriptionCreateMerchantManagedSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchantManagedSubscription: async (subscriptionCreateMerchantManagedSubscriptionRequest?: SubscriptionCreateMerchantManagedSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurring/ondemand`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionCreateMerchantManagedSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/ondemand',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateMerchantManagedSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Subscription
         * @param {SubscriptionCreateNewRequest} [subscriptionCreateNewRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew: async (subscriptionCreateNewRequest?: SubscriptionCreateNewRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurring/subscriptions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionCreateNewRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/subscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateNewRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Specific Subscription
         * @param {number} subscriptionId BlueSnap identifier for the subscription.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecific: async (subscriptionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('getSpecific', 'subscriptionId', subscriptionId)
            const localVarPath = `/recurring/subscriptions/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscriptionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/subscriptions/{subscriptionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve Subscription Switch Charge Amount
         * @param {string} [newplanid] 
         * @param {string} [newquantity] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchChargeAmount: async (newplanid?: string, newquantity?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurring/subscriptions/:subscriptionId/switch-charge-amount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })
            if (newplanid !== undefined) {
                localVarQueryParameter['newplanid'] = newplanid;
            }

            if (newquantity !== undefined) {
                localVarQueryParameter['newquantity'] = newquantity;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/subscriptions/:subscriptionId/switch-charge-amount',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Subscriptions
         * @param {string} [pagesize] 
         * @param {string} [after] 
         * @param {boolean} [gettotal] 
         * @param {boolean} [fulldescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllSubscriptions: async (pagesize?: string, after?: string, gettotal?: boolean, fulldescription?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/recurring/subscriptions?{parameters}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (gettotal !== undefined) {
                localVarQueryParameter['gettotal'] = gettotal;
            }

            if (fulldescription !== undefined) {
                localVarQueryParameter['fulldescription'] = fulldescription;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/subscriptions?{parameters}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve All Charges for a Subscription
         * @param {string} [pagesize] 
         * @param {string} [after] 
         * @param {boolean} [fulldescription] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharges: async (pagesize?: string, after?: string, fulldescription?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/:subscriptionId/charges?{parameters}`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })
            if (pagesize !== undefined) {
                localVarQueryParameter['pagesize'] = pagesize;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (fulldescription !== undefined) {
                localVarQueryParameter['fulldescription'] = fulldescription;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/:subscriptionId/charges?{parameters}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Subscription
         * @param {number} subscriptionId BlueSnap identifier for the subscription.
         * @param {SubscriptionUpdateSubscriptionRequest} [subscriptionUpdateSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription: async (subscriptionId: number, subscriptionUpdateSubscriptionRequest?: SubscriptionUpdateSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subscriptionId' is not null or undefined
            assertParamExists('updateSubscription', 'subscriptionId', subscriptionId)
            const localVarPath = `/recurring/subscriptions/{subscriptionId}`
                .replace(`{${"subscriptionId"}}`, encodeURIComponent(String(subscriptionId !== undefined ? subscriptionId : `-subscriptionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)
            // authentication sec1 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec1", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionUpdateSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/recurring/subscriptions/{subscriptionId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdateSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Merchant-Managed Subscription Charge
         * @param {SubscriptionApiCreateMerchantManagedChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMerchantManagedCharge(requestParameters: SubscriptionApiCreateMerchantManagedChargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const subscriptionCreateMerchantManagedChargeRequest: SubscriptionCreateMerchantManagedChargeRequest = {
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                merchantTransactionId: requestParameters.merchantTransactionId,
                taxReference: requestParameters.taxReference
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMerchantManagedCharge(requestParameters.subscriptionId, subscriptionCreateMerchantManagedChargeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Merchant-Managed Subscription
         * @param {SubscriptionApiCreateMerchantManagedSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMerchantManagedSubscription(requestParameters: SubscriptionApiCreateMerchantManagedSubscriptionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const subscriptionCreateMerchantManagedSubscriptionRequest: SubscriptionCreateMerchantManagedSubscriptionRequest = {
                amount: requestParameters.amount,
                currency: requestParameters.currency,
                payerInfo: requestParameters.payerInfo,
                paymentSource: requestParameters.paymentSource
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMerchantManagedSubscription(subscriptionCreateMerchantManagedSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create Subscription
         * @param {SubscriptionApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNew(requestParameters: SubscriptionApiCreateNewRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const subscriptionCreateNewRequest: SubscriptionCreateNewRequest = {
                payerInfo: requestParameters.payerInfo,
                paymentSource: requestParameters.paymentSource,
                planId: requestParameters.planId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNew(subscriptionCreateNewRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Specific Subscription
         * @param {SubscriptionApiGetSpecificRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecific(requestParameters: SubscriptionApiGetSpecificRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecific(requestParameters.subscriptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve Subscription Switch Charge Amount
         * @param {SubscriptionApiGetSwitchChargeAmountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSwitchChargeAmount(requestParameters: SubscriptionApiGetSwitchChargeAmountRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSwitchChargeAmount(requestParameters.newplanid, requestParameters.newquantity, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve All Subscriptions
         * @param {SubscriptionApiListAllSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllSubscriptions(requestParameters: SubscriptionApiListAllSubscriptionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllSubscriptions(requestParameters.pagesize, requestParameters.after, requestParameters.gettotal, requestParameters.fulldescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Retrieve All Charges for a Subscription
         * @param {SubscriptionApiListChargesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCharges(requestParameters: SubscriptionApiListChargesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCharges(requestParameters.pagesize, requestParameters.after, requestParameters.fulldescription, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Subscription
         * @param {SubscriptionApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSubscription(requestParameters: SubscriptionApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const subscriptionUpdateSubscriptionRequest: SubscriptionUpdateSubscriptionRequest = {
                planId: requestParameters.planId
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSubscription(requestParameters.subscriptionId, subscriptionUpdateSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Merchant-Managed Subscription Charge
         * @param {SubscriptionApiCreateMerchantManagedChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchantManagedCharge(requestParameters: SubscriptionApiCreateMerchantManagedChargeRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createMerchantManagedCharge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Merchant-Managed Subscription
         * @param {SubscriptionApiCreateMerchantManagedSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMerchantManagedSubscription(requestParameters: SubscriptionApiCreateMerchantManagedSubscriptionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createMerchantManagedSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Subscription
         * @param {SubscriptionApiCreateNewRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNew(requestParameters: SubscriptionApiCreateNewRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createNew(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Specific Subscription
         * @param {SubscriptionApiGetSpecificRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecific(requestParameters: SubscriptionApiGetSpecificRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSpecific(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve Subscription Switch Charge Amount
         * @param {SubscriptionApiGetSwitchChargeAmountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSwitchChargeAmount(requestParameters: SubscriptionApiGetSwitchChargeAmountRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getSwitchChargeAmount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Subscriptions
         * @param {SubscriptionApiListAllSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllSubscriptions(requestParameters: SubscriptionApiListAllSubscriptionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listAllSubscriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve All Charges for a Subscription
         * @param {SubscriptionApiListChargesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCharges(requestParameters: SubscriptionApiListChargesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.listCharges(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Subscription
         * @param {SubscriptionApiUpdateSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSubscription(requestParameters: SubscriptionApiUpdateSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMerchantManagedCharge operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiCreateMerchantManagedChargeRequest
 */
export type SubscriptionApiCreateMerchantManagedChargeRequest = {
    
    /**
    * BlueSnap identifier for the subscription.
    * @type {number}
    * @memberof SubscriptionApiCreateMerchantManagedCharge
    */
    readonly subscriptionId: number
    
} & SubscriptionCreateMerchantManagedChargeRequest

/**
 * Request parameters for createMerchantManagedSubscription operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiCreateMerchantManagedSubscriptionRequest
 */
export type SubscriptionApiCreateMerchantManagedSubscriptionRequest = {
    
} & SubscriptionCreateMerchantManagedSubscriptionRequest

/**
 * Request parameters for createNew operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiCreateNewRequest
 */
export type SubscriptionApiCreateNewRequest = {
    
} & SubscriptionCreateNewRequest

/**
 * Request parameters for getSpecific operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetSpecificRequest
 */
export type SubscriptionApiGetSpecificRequest = {
    
    /**
    * BlueSnap identifier for the subscription.
    * @type {number}
    * @memberof SubscriptionApiGetSpecific
    */
    readonly subscriptionId: number
    
}

/**
 * Request parameters for getSwitchChargeAmount operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetSwitchChargeAmountRequest
 */
export type SubscriptionApiGetSwitchChargeAmountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiGetSwitchChargeAmount
    */
    readonly newplanid?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiGetSwitchChargeAmount
    */
    readonly newquantity?: string
    
}

/**
 * Request parameters for listAllSubscriptions operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiListAllSubscriptionsRequest
 */
export type SubscriptionApiListAllSubscriptionsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiListAllSubscriptions
    */
    readonly pagesize?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiListAllSubscriptions
    */
    readonly after?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof SubscriptionApiListAllSubscriptions
    */
    readonly gettotal?: boolean
    
    /**
    * 
    * @type {boolean}
    * @memberof SubscriptionApiListAllSubscriptions
    */
    readonly fulldescription?: boolean
    
}

/**
 * Request parameters for listCharges operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiListChargesRequest
 */
export type SubscriptionApiListChargesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiListCharges
    */
    readonly pagesize?: string
    
    /**
    * 
    * @type {string}
    * @memberof SubscriptionApiListCharges
    */
    readonly after?: string
    
    /**
    * 
    * @type {boolean}
    * @memberof SubscriptionApiListCharges
    */
    readonly fulldescription?: boolean
    
}

/**
 * Request parameters for updateSubscription operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiUpdateSubscriptionRequest
 */
export type SubscriptionApiUpdateSubscriptionRequest = {
    
    /**
    * BlueSnap identifier for the subscription.
    * @type {number}
    * @memberof SubscriptionApiUpdateSubscription
    */
    readonly subscriptionId: number
    
} & SubscriptionUpdateSubscriptionRequest

/**
 * SubscriptionApiGenerated - object-oriented interface
 * @export
 * @class SubscriptionApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriptionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Merchant-Managed Subscription Charge
     * @param {SubscriptionApiCreateMerchantManagedChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public createMerchantManagedCharge(requestParameters: SubscriptionApiCreateMerchantManagedChargeRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).createMerchantManagedCharge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Merchant-Managed Subscription
     * @param {SubscriptionApiCreateMerchantManagedSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public createMerchantManagedSubscription(requestParameters: SubscriptionApiCreateMerchantManagedSubscriptionRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).createMerchantManagedSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Subscription
     * @param {SubscriptionApiCreateNewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public createNew(requestParameters: SubscriptionApiCreateNewRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).createNew(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Specific Subscription
     * @param {SubscriptionApiGetSpecificRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public getSpecific(requestParameters: SubscriptionApiGetSpecificRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getSpecific(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve Subscription Switch Charge Amount
     * @param {SubscriptionApiGetSwitchChargeAmountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public getSwitchChargeAmount(requestParameters: SubscriptionApiGetSwitchChargeAmountRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getSwitchChargeAmount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Subscriptions
     * @param {SubscriptionApiListAllSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public listAllSubscriptions(requestParameters: SubscriptionApiListAllSubscriptionsRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).listAllSubscriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve All Charges for a Subscription
     * @param {SubscriptionApiListChargesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public listCharges(requestParameters: SubscriptionApiListChargesRequest = {}, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).listCharges(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Subscription
     * @param {SubscriptionApiUpdateSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public updateSubscription(requestParameters: SubscriptionApiUpdateSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).updateSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
